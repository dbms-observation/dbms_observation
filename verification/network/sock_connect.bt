#include <linux/in.h>
#include <linux/in6.h>

BEGIN
{
    printf("%-6s %-16s FAM %-16s %-5s %-8s %s\n","PID", "PROCESS", "ADDRESS", "PORT", "LAT(us)", "RESULT");
    @err2str[0]="Success";

    @err2str[EACCES] = "EACCES";
    @err2str[EPERM] = "EPERM";
    @err2str[EADDRINUSE] = "EADDRINUSE";
    @err2str[EADDRNOTAVAIL] = "EADDRNOTAVAIL";
    @err2str[EAFNOSUPPORT] = "EAFNOSUPPORT";
    @err2str[EAGAIN] = "EAGAIN";
    @err2str[EALREADY] = "EALREADY";
    @err2str[EBADF] = "EBADF";
    @err2str[ECONNREFUSED] = "ECONNREFUSED";
    @err2str[EFAULT] = "EFAULT";
    @err2str[EINPROGRESS] = "EINPROGRESS";
    @err2str[EINTR] = "EINTR";
    @err2str[EISCONN] = "EISCONN";
    @err2str[ENETUNREACH] = "ENETUNREACH";
    @err2str[ENOTSOCK] = "ENOTSOCK";
    @err2str[EPROTOTYPE] = "EPROTOTYPE";
    @err2str[ETIMEDOUT] = "ETIMEDOUT";
}

tracepoint:syscalls:sys_enter_connect
/args->uservaddr->sa_family == AF_INET || 
    args->uservaddr->sa_family == AF_INET6/
{
    @sockaddr[tid] = args->uservaddr;
    @start[tid] = nsecs;
}

tracepoint:syscalls:sys_exit_connect
/@start[tid]/
{
    $dur_us = (nsecs-@start[tid]) / 1000;
    printf("%-6d %-16s %-3d", pid, comm, @sockaddr[tid]->sa_family);

    if(@sockaddr[tid]->sa_family == AF_INET){
        $s = (struct sockaddr_in *) @sockaddr[tid];
        $port = ($s->sin_port >> 8) | ($s->sin_port<<8) & 0xff00;    //还原endian
        printf("%-16s %-5d %-8d %s\n",
            ntop(AF_INET,$s->sin_addr.s_addr),
            $port, $dur_us, @err2str[-args->ret]);
    } else {
        $s6 = (struct sockaddr_in6 *) @sockaddr[tid];
        $port = ($s6->sin6_port >> 8) | ($s6->sin6_port<<8) & 0xff00;
        printf("%-16s %-5d %-8d %s\n",
            ntop(AF_INET6,$s6->sin6_addr.in6_u.u6_addr8),
            $port, $dur_us, @err2str[-args->ret]);
    }

    delete(@sockaddr[tid]);
    delete(@start[tid]);
}

END
{
    clear(@start);
    clear(@err2str);
    clear(@sockaddr);
}